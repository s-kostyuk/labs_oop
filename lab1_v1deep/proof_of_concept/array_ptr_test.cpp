#include "array_ptr.hpp"
#include <cassert>

int main ()
{
    // Опорный масив
    int data[] = { 1, 2, 3, 4, 5 };

    // Безопасный указатель. Начальная позиция 0
    ArrayPtr p( data, 5 );

    // Вызов оператора разыменования с целью чтения. Значение в позиции 0 равно 1
    assert( *p == 1 );

    // Вызов оператора разыменования с целью записи.
    * p = 8;                          // Новое состояние массива: 8 2 3 4 5
    assert( data[ 0 ] == 8 );

    // Префикисный инкремент, моментальное использование нового значения для записи
    *++p = 9;                         // Новое состояние массива: 8 9 3 4 5
    assert( data[ 1 ] == 9 );

    // Постфиксный инкремент. Старая позиция 1. Новая позиция 2.
    p++;
    assert( * p == 3 );

    // Постфиксный декремент, моментальное использование предыдущего состояния.
    // Новая позиция 1
    assert( *p-- == 3 );
    assert( * p == 9 );

    // Оператор индексной выборки с целью чтения
    assert( p[ 2 ] == 4 );

    // Оператор индексной выборки с целью записи
    p[ -1 ] = 0;                      // Новое состояние массива: 0 9 3 4 5
    assert( data[ 0 ] == 0 );

    // Вызов немодифицирующего оператора сложения указателя и числа.
    // Возврат - новый указатель.
    ArrayPtr p2 = p + 1;
    assert( * p2 == 3 );

    // Вызов модифицирующего оператора вычитания числа из указателя. Возврат ссылки.
    p2 -= 2;
    assert( * p2 == 0 );

    // Вызов немодифицирующего оператора вычитания указателя из указателя.
    // Возврат расстояния.
    assert( ( p - p2 ) == 1 );
}
